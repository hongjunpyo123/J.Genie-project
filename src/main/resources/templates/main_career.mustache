<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>JGenie - 커리어</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            min-height: 100dvh;
            max-height: 100vh;
            max-height: 100dvh;
            overflow-x: hidden;
            overflow-y: hidden;
            padding-bottom: 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 메인 컨테이너 */
        .main-container {
            padding: 16px;
            max-width: 100%;
            width: 100%;
            margin: 0 auto;
            height: calc(100vh - 70px);
            height: calc(100dvh - 70px);
            overflow-x: hidden;
            overflow-y: auto;
            box-sizing: border-box;
            opacity: 0;
            animation: fadeInUp 0.8s ease-out forwards;
        }

        /* 헤더 영역 */
        .header {
            margin-bottom: clamp(20px, 5vw, 30px);
            padding-top: 8px;
            padding-top: max(8px, env(safe-area-inset-top));
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .header-content {
            flex: 1;
        }

        .logo {
            font-size: clamp(1.3rem, 4vw, 1.5rem);
            font-weight: 700;
            color: rgba(255, 255, 255, 0.95);
            letter-spacing: -0.02em;
            margin-bottom: 6px;
            text-shadow: 0 2px 10px rgba(255, 255, 255, 0.2);
        }

        .welcome-text {
            color: rgba(255, 255, 255, 0.8);
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            font-weight: 400;
            line-height: 1.4;
            letter-spacing: -0.01em;
        }

        /* 추가 버튼 */
        .add-career-btn {
            width: clamp(36px, 9vw, 40px);
            height: clamp(36px, 9vw, 40px);
            background: rgba(255, 255, 255, 0.15);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            touch-action: manipulation;
            margin-top: 8px;
        }

        .add-career-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
            transform: scale(1.1);
        }

        .add-career-btn:active {
            transform: scale(0.95);
        }

        .add-career-btn::before {
            content: '+';
            color: rgba(255, 255, 255, 0.9);
            font-size: clamp(1.2rem, 4vw, 1.4rem);
            font-weight: 600;
            line-height: 1;
        }

        /* 커리어 섹션 */
        .careers-section {
            margin-bottom: clamp(24px, 6vw, 48px);
        }

        .section-title {
            color: rgba(255, 255, 255, 0.95);
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            font-weight: 600;
            margin-bottom: 16px;
            letter-spacing: -0.01em;
        }

        .careers-stack {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .career-item {
            background: rgba(255, 255, 255, 0.12);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            padding: clamp(16px, 4vw, 20px);
            backdrop-filter: blur(15px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            animation: slideInUp 0.5s ease-out;
            position: relative;
        }

        .career-item:hover {
            background: rgba(255, 255, 255, 0.18);
            border-color: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        /* 삭제 버튼 스타일 */
        .delete-btn {
            position: absolute;
            top: 12px;
            right: 12px;
            width: 24px;
            height: 24px;
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
            touch-action: manipulation;
        }

        .delete-btn:hover {
            background: rgba(239, 68, 68, 0.8);
            border-color: rgba(239, 68, 68, 1);
            transform: scale(1.1);
        }

        .delete-btn:active {
            transform: scale(0.9);
        }

        .delete-btn::before {
            content: '×';
            color: rgba(255, 255, 255, 0.8);
            font-size: 14px;
            font-weight: 400;
            line-height: 1;
        }

        .delete-btn:hover::before {
            color: white;
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .career-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 8px;
        }

        .career-type {
            background: rgba(255, 255, 255, 0.2);
            color: rgba(255, 255, 255, 0.9);
            padding: 4px 8px;
            border-radius: 6px;
            font-size: clamp(0.65rem, 2.5vw, 0.7rem);
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        .career-title {
            color: rgba(255, 255, 255, 0.95);
            font-size: clamp(0.9rem, 3.5vw, 1rem);
            font-weight: 600;
            margin-bottom: 8px;
            letter-spacing: -0.01em;
            line-height: 1.3;
            padding-right: 36px;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
            white-space: normal;
        }

        .career-content {
            color: rgba(255, 255, 255, 0.8);
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            line-height: 1.5;
            letter-spacing: -0.01em;
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
            white-space: normal;
        }

        /* 빈 상태 */
        .empty-state {
            text-align: center;
            padding: clamp(40px, 10vw, 60px) 20px;
            color: rgba(255, 255, 255, 0.7);
        }

        .empty-icon {
            font-size: clamp(2rem, 8vw, 3rem);
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-text {
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            line-height: 1.5;
            margin-bottom: 8px;
        }

        .empty-subtext {
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            opacity: 0.8;
        }

        /* 모달 스타일 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            padding: 20px;
            padding-top: max(20px, env(safe-area-inset-top));
            padding-bottom: max(20px, env(safe-area-inset-bottom));
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: clamp(20px, 5vw, 24px);
            max-width: calc(100vw - 40px);
            width: 100%;
            max-width: 420px;
            max-height: calc(100vh - 40px);
            max-height: calc(100dvh - 40px);
            overflow-y: auto;
            backdrop-filter: blur(20px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            transform: translateY(30px) scale(0.9);
            transition: all 0.3s ease;
            position: relative;
        }

        .modal-overlay.active .modal-content {
            transform: translateY(0) scale(1);
        }

        .modal-close {
            position: absolute;
            top: 16px;
            right: 16px;
            width: clamp(28px, 7vw, 32px);
            height: clamp(28px, 7vw, 32px);
            border: none;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            touch-action: manipulation;
        }

        .modal-close:hover {
            background: rgba(0, 0, 0, 0.15);
            transform: scale(1.1);
        }

        .modal-close::before {
            content: '×';
            font-size: clamp(16px, 4vw, 18px);
            color: rgba(0, 0, 0, 0.6);
            font-weight: 300;
        }

        .modal-header {
            margin-bottom: 20px;
            padding-right: 40px;
        }

        .modal-title {
            font-size: clamp(1.1rem, 4vw, 1.2rem);
            font-weight: 700;
            color: rgba(0, 0, 0, 0.9);
            margin-bottom: 8px;
            letter-spacing: -0.02em;
        }

        .modal-subtitle {
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            color: rgba(0, 0, 0, 0.6);
            font-weight: 500;
        }

        /* 폼 스타일 */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-weight: 600;
            color: rgba(0, 0, 0, 0.8);
            margin-bottom: 8px;
            letter-spacing: -0.01em;
        }

        .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 8px;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-family: inherit;
            color: rgba(0, 0, 0, 0.8);
            background: rgba(102, 126, 234, 0.03);
            transition: all 0.2s ease;
        }

        .form-input {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 8px;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-family: inherit;
            color: rgba(0, 0, 0, 0.8);
            background: rgba(102, 126, 234, 0.03);
            transition: all 0.2s ease;
        }

        .form-textarea {
            width: 100%;
            min-height: clamp(80px, 20vw, 100px);
            padding: 12px;
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 8px;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-family: inherit;
            color: rgba(0, 0, 0, 0.8);
            background: rgba(102, 126, 234, 0.03);
            resize: vertical;
            transition: all 0.2s ease;
        }

        .form-select:focus,
        .form-input:focus,
        .form-textarea:focus {
            outline: none;
            border-color: rgba(102, 126, 234, 0.5);
            background: rgba(102, 126, 234, 0.08);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-select::placeholder,
        .form-input::placeholder,
        .form-textarea::placeholder {
            color: rgba(0, 0, 0, 0.4);
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
        }

        .modal-actions {
            display: flex;
            gap: 8px;
            margin-top: 24px;
        }

        .btn {
            flex: 1;
            padding: clamp(10px, 3vw, 12px) clamp(16px, 4vw, 20px);
            border: none;
            border-radius: 10px;
            font-size: clamp(0.8rem, 3vw, 0.85rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            letter-spacing: -0.01em;
            touch-action: manipulation;
            min-height: 44px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: rgba(0, 0, 0, 0.05);
            color: rgba(0, 0, 0, 0.7);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(0, 0, 0, 0.08);
            transform: translateY(-1px);
        }

        /* 오류 메시지 */
        .error-message {
            color: #e53e3e;
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            margin-top: 8px;
            text-align: center;
        }

        /* 말풍선 알림 */
        .bubble-notification {
            position: absolute;
            top: -45px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            color: rgba(102, 126, 234, 0.9);
            padding: 8px 12px;
            border-radius: 12px;
            font-size: clamp(0.65rem, 2.5vw, 0.7rem);
            font-weight: 600;
            white-space: nowrap;
            animation: bubbleBounce 2s ease-in-out infinite;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
            pointer-events: none;
        }

        .bubble-notification::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 6px solid rgba(255, 255, 255, 0.95);
        }

        @keyframes bubbleBounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateX(-50%) translateY(0);
            }
            40% {
                transform: translateX(-50%) translateY(-3px);
            }
            60% {
                transform: translateX(-50%) translateY(-1px);
            }
        }

        /* 알림 토스트 */
        .toast {
            position: fixed;
            bottom: 90px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: rgba(34, 197, 94, 0.95);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: clamp(0.8rem, 3vw, 0.85rem);
            font-weight: 500;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            z-index: 50;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .toast.show {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

        .toast.error {
            background: rgba(239, 68, 68, 0.95);
        }

        /* 하단 네비게이션 */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.12);
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.15);
            padding: 8px 0 6px 0;
            padding-bottom: max(6px, env(safe-area-inset-bottom));
            z-index: 100;
            height: clamp(60px, 15vw, 70px);
        }

        .nav-container {
            max-width: 100%;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            align-items: center;
            justify-items: center;
            height: 100%;
            padding: 0 16px;
            position: relative;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
            padding: 4px clamp(8px, 2vw, 12px);
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 8px;
            text-decoration: none;
            min-width: clamp(40px, 10vw, 44px);
            touch-action: manipulation;
            width: 100%;
            justify-self: center;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.15);
        }

        .nav-icon {
            width: clamp(20px, 5vw, 24px);
            height: clamp(20px, 5vw, 24px);
            position: relative;
            transition: all 0.2s ease;
        }

        /* 메인 자소서 버튼 */
        .main-button {
            grid-column: 3;
            justify-self: center;
            align-self: center;
            width: clamp(60px, 15vw, 70px);
            height: clamp(60px, 15vw, 70px);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            touch-action: manipulation;
            z-index: 10;
            margin-top: -10px;
        }

        .main-button:hover {
            transform: scale(1.05);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.5);
        }

        .main-button:active {
            transform: scale(0.95);
        }

        .main-button::before {
            content: '';
            font-size: clamp(20px, 5vw, 24px);
            margin-bottom: 2px;
        }

        .main-button-text {
            font-size: clamp(0.5rem, 2vw, 0.6rem);
            color: white;
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        /* SVG 아이콘 스타일 */
.nav-icon svg {
    width: 100%;
    height: 100%;
    stroke: rgba(255, 255, 255, 0.7);
    fill: none;
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
}

.nav-item.active .nav-icon svg {
    stroke: rgba(255, 255, 255, 0.95);
}

/* 홈 아이콘은 fill 사용 */
.nav-icon.home svg {
    fill: rgba(255, 255, 255, 0.7);
    stroke: none;
}

.nav-item.active .nav-icon.home svg {
    fill: rgba(255, 255, 255, 0.95);
}

        .nav-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: clamp(0.6rem, 2.5vw, 0.65rem);
            font-weight: 500;
            letter-spacing: -0.01em;
        }

        .nav-item.active .nav-label {
            color: rgba(255, 255, 255, 0.95);
        }

        /* 배경 파티클 효과 */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
                opacity: 0.1;
            }
            50% {
                transform: translateY(-12px) rotate(180deg);
                opacity: 0.25;
            }
        }

        /* 반응형 대응 */
        @media (max-width: 375px) {
            .main-container {
                padding: 12px;
            }

            .modal-overlay {
                padding: 12px;
            }

            .nav-item {
                padding: 4px 6px;
                min-width: 36px;
            }
        }

        @media (max-width: 320px) {
            .main-container {
                padding: 10px;
            }

            .modal-overlay {
                padding: 8px;
            }
        }

        @media (min-width: 768px) {
            .main-container {
                max-width: 500px;
                padding: 24px;
            }

            .nav-container {
                max-width: 500px;
            }
        }

        /* 접근성 개선 */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        /* iOS Safari 특화 */
        @supports (-webkit-touch-callout: none) {
            body {
                min-height: -webkit-fill-available;
            }

            .modal-content {
                max-height: -webkit-fill-available;
            }
        }
    </style>
</head>
<body>
<!-- 배경 파티클 -->
<div class="particles" id="particles"></div>

<!-- 메인 컨테이너 -->
<div class="main-container">
    <!-- 헤더 -->
    <header class="header">
        <div class="header-content">
            <h1 class="logo">JGenie</h1>
            <p class="welcome-text">나의 커리어를 체계적으로 관리하고<br>성장 과정을 기록해보세요</p>
        </div>
        <button class="add-career-btn" id="addCareerBtn"></button>
    </header>

    <!-- 커리어 섹션 -->
    <section class="careers-section">
        <h2 class="section-title">나의 커리어</h2>
        <div class="careers-stack" id="careersStack">
            <!-- 커리어 아이템들이 여기에 렌더링됩니다 -->
        </div>

        <!-- 빈 상태 -->
        <div class="empty-state" id="emptyState" style="display: none;">
            <div class="empty-icon">📋</div>
            <div class="empty-text">아직 등록된 커리어가 없어요</div>
            <div class="empty-subtext">우측 상단의 + 버튼을 눌러 첫 커리어를 추가해보세요</div>
        </div>
    </section>
</div>

<!-- 커리어 추가 모달 -->
<div class="modal-overlay" id="careerModal">
    <div class="modal-content">
        <button class="modal-close" id="modalClose"></button>
        <div class="modal-header">
            <h2 class="modal-title">새 커리어 추가</h2>
            <p class="modal-subtitle">나의 성취와 경험을 기록해보세요</p>
        </div>

        <form id="careerForm">
            <div class="form-group">
                <label class="form-label" for="careerType">커리어 타입</label>
                <select class="form-select" id="careerType" name="careerType" required>
                    <option value="">타입을 선택해주세요</option>
                    <option value="학력">학력</option>
                    <option value="경력">경력</option>
                    <option value="경험/활동">경험/활동</option>
                    <option value="교육/훈련">교육/훈련</option>
                    <option value="자격/어학">자격/어학</option>
                    <option value="수상">수상</option>
                    <option value="스킬/역량">스킬/역량</option>
                    <option value="프로젝트/성과">프로젝트/성과</option>
                    <option value="기타">기타</option>
                </select>
            </div>

            <div class="form-group">
                <label class="form-label" for="careerTitle">커리어 제목</label>
                <input
                        type="text"
                        class="form-input"
                        id="careerTitle"
                        name="careerTitle"
                        placeholder="예: ~~해커톤 참여, 토익 900점 취득 등"
                        required>
            </div>

            <div class="form-group">
                <label class="form-label" for="careerContent">상세 내용</label>
                <textarea
                        class="form-textarea"
                        id="careerContent"
                        name="careerContent"
                        placeholder="커리어에 대한 자세한 내용을 작성해주세요. 성과, 배운점, 역할 등을 구체적으로 기록하면 좋습니다."
                        required></textarea>
            </div>

            <div class="error-message" id="errorMessage" style="display: none;"></div>

            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" id="modalCancel">취소</button>
                <button type="submit" class="btn btn-primary" id="modalSubmit">등록하기</button>
            </div>
        </form>
    </div>
</div>

<!-- 토스트 추가 (하단 네비게이션 바로 위) -->
<div id="successToast" class="toast"></div>

<!-- 하단 네비게이션 -->
<nav class="bottom-nav">
    <div class="nav-container">
        <a href="/main/home" class="nav-item">
            <div class="nav-icon home">
                <svg viewBox="0 0 24 24">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                </svg>
            </div>
            <span class="nav-label">홈</span>
        </a>
        <a href="/main/search" class="nav-item">
            <div class="nav-icon search">
                <svg viewBox="0 0 24 24">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
            </div>
            <span class="nav-label">검색</span>
        </a>

        <!-- 메인 자소서 버튼 -->
        <button class="main-button" id="mainButton">
            <div class="bubble-notification">여기서 확인하세요!</div>
            <svg viewBox="0 0 24 24" style="width: clamp(20px, 5vw, 24px); height: clamp(20px, 5vw, 24px); stroke: #FFD700; fill: none; stroke-width: 2; stroke-linecap: round; stroke-linejoin: round; margin-bottom: 2px;">
                <path d="M12 20h9"></path>
                <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
            </svg>
            <span class="main-button-text">자소서</span>
        </button>

        <a href="/main/career" class="nav-item active">
            <div class="nav-icon career">
                <svg viewBox="0 0 24 24">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                    <line x1="8" y1="21" x2="16" y2="21"/>
                    <line x1="12" y1="17" x2="12" y2="21"/>
                </svg>
            </div>
            <span class="nav-label">커리어</span>
        </a>
        <a href="/main/profile" class="nav-item">
            <div class="nav-icon profile">
                <svg viewBox="0 0 24 24">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                    <circle cx="12" cy="7" r="4"/>
                </svg>
            </div>
            <span class="nav-label">프로필</span>
        </a>
    </div>
</nav>

<script>
    // 전역 변수
    let careersData = [];

    // 배경 파티클 생성
    function createParticles() {
        const particlesContainer = document.getElementById('particles');
        const particleCount = 10;

        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.classList.add('particle');

            particle.style.top = Math.random() * 100 + '%';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 8 + 's';
            particle.style.animationDuration = (6 + Math.random() * 4) + 's';

            particlesContainer.appendChild(particle);
        }
    }

    // API에서 커리어 데이터 가져오기
    async function fetchCareersData() {
        try {
            const response = await fetch('/careers');
            if (!response.ok) {
                throw new Error('커리어 데이터를 불러올 수 없습니다.');
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('API 호출 오류:', error);
            throw error;
        }
    }

    // 커리어 삭제 함수
    async function deleteCareer(careerId) {
        try {
            const response = await fetch(`/career/${careerId}`, {
                method: 'DELETE'
            });

            if (response.status === 200) {
                showToast('커리어가 성공적으로 삭제되었습니다!', 'success');
                // API 재호출로 데이터 업데이트
                const careers = await fetchCareersData();
                renderCareers(careers);
            } else {
                showToast('삭제에 실패했습니다', 'error');
            }
        } catch (error) {
            console.error('커리어 삭제 오류:', error);
            showToast('삭제에 실패했습니다', 'error');
        }
    }

    // 토스트 메시지 표시 함수
    function showToast(message, type = 'success') {
        const toast = document.getElementById('successToast');
        toast.textContent = message;

        // 타입에 따라 클래스 설정
        toast.className = 'toast';
        if (type === 'error') {
            toast.classList.add('error');
        }

        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // 커리어 데이터 렌더링
    function renderCareers(careers) {
        careersData = careers;
        const careersStack = document.getElementById('careersStack');
        const emptyState = document.getElementById('emptyState');

        // 기존 내용 초기화
        careersStack.innerHTML = '';

        if (careers.length === 0) {
            emptyState.style.display = 'block';
            return;
        }

        emptyState.style.display = 'none';

        // 커리어 아이템들 렌더링 (최신순으로 정렬)
        careers.forEach((career, index) => {
            const careerItem = document.createElement('div');
            careerItem.className = 'career-item';
            careerItem.style.animationDelay = `${index * 0.1}s`;

            careerItem.innerHTML = `
                <button class="delete-btn" onclick="deleteCareer(${career.careerId})"></button>
                <div class="career-header">
                    <span class="career-type">${career.careerType}</span>
                </div>
                <h3 class="career-title">${career.careerTitle}</h3>
                <p class="career-content">${career.careerContent}</p>
            `;

            careersStack.appendChild(careerItem);
        });
    }

    // 커리어 추가 모달 열기
    function openCareerModal() {
        const modal = document.getElementById('careerModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';

        // 폼 초기화
        document.getElementById('careerForm').reset();
        document.getElementById('errorMessage').style.display = 'none';
    }

    // 모달 닫기
    function closeCareerModal() {
        const modal = document.getElementById('careerModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';

        // 폼 초기화
        document.getElementById('careerForm').reset();
        document.getElementById('errorMessage').style.display = 'none';
    }

    // 성공 토스트 표시
    function showSuccessToast() {
        showToast('커리어가 성공적으로 등록되었습니다!', 'success');
    }

    // 오류 메시지 표시
    function showErrorMessage(message) {
        const errorElement = document.getElementById('errorMessage');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    // 커리어 등록 처리
    async function handleCareerSubmit(formData) {
        const submitButton = document.getElementById('modalSubmit');

        // 버튼 비활성화 및 로딩 상태
        submitButton.disabled = true;
        submitButton.textContent = '등록 중...';

        try {
            const response = await fetch('/career/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    careerType: formData.get('careerType'),
                    careerTitle: formData.get('careerTitle'),
                    careerContent: formData.get('careerContent')
                })
            });

            if (response.status === 200) {
                // 성공 처리
                closeCareerModal();
                showSuccessToast();

                // API 재호출로 데이터 업데이트
                const careers = await fetchCareersData();
                renderCareers(careers);
            } else {
                // 실패 처리
                showErrorMessage('등록에 실패했습니다');
            }
        } catch (error) {
            console.error('커리어 등록 오류:', error);
            showErrorMessage('등록에 실패했습니다');
        } finally {
            // 버튼 상태 복원
            submitButton.disabled = false;
            submitButton.textContent = '등록하기';
        }
    }

    // 메인 자소서 버튼 클릭 이벤트
    const mainButton = document.getElementById('mainButton');
    if (mainButton) {
        mainButton.addEventListener('click', function() {
            window.location.href = '/coverletter';
        });
    }

    // 이벤트 리스너 설정
    document.addEventListener('DOMContentLoaded', function() {
        // 커리어 추가 버튼
        document.getElementById('addCareerBtn').addEventListener('click', openCareerModal);

        // 모달 닫기 버튼들
        document.getElementById('modalClose').addEventListener('click', closeCareerModal);
        document.getElementById('modalCancel').addEventListener('click', closeCareerModal);

        // 모달 외부 클릭시 닫기
        document.getElementById('careerModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCareerModal();
            }
        });

        // 커리어 폼 제출
        document.getElementById('careerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            handleCareerSubmit(formData);
        });

        // 네비게이션 아이템 클릭 이벤트
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', function(e) {
                if (this.classList.contains('active')) {
                    e.preventDefault();
                    return;
                }

                document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                this.classList.add('active');
            });
        });
    });

    // 페이지 로드 시 초기화
    window.addEventListener('load', async () => {
        createParticles();

        try {
            // API에서 커리어 데이터 가져와서 렌더링
            const careers = await fetchCareersData();
            renderCareers(careers);
        } catch (error) {
            console.error('커리어 데이터 로드 실패:', error);
            // 오류 발생 시 빈 상태 표시
            document.getElementById('emptyState').style.display = 'block';
        }
    });
</script>
</body>
</html>