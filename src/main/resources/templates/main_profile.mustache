<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>JGenie - 프로필</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            min-height: 100dvh;
            max-height: 100vh;
            max-height: 100dvh;
            overflow-x: hidden;
            overflow-y: hidden;
            padding-bottom: 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 메인 컨테이너 */
        .main-container {
            padding: 16px;
            max-width: 100%;
            width: 100%;
            margin: 0 auto;
            height: calc(100vh - 70px);
            height: calc(100dvh - 70px);
            overflow-x: hidden;
            overflow-y: auto;
            box-sizing: border-box;
            opacity: 0;
            animation: fadeInUp 0.8s ease-out forwards;
        }

        /* 헤더 영역 */
        .header {
            margin-bottom: clamp(20px, 5vw, 30px);
            padding-top: 8px;
            padding-top: max(8px, env(safe-area-inset-top));
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .header-content {
            flex: 1;
        }

        .logo {
            font-size: clamp(1.3rem, 4vw, 1.5rem);
            font-weight: 700;
            color: rgba(255, 255, 255, 0.95);
            letter-spacing: -0.02em;
            margin-bottom: 6px;
            text-shadow: 0 2px 10px rgba(255, 255, 255, 0.2);
        }

        .welcome-text {
            color: rgba(255, 255, 255, 0.8);
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            font-weight: 400;
            line-height: 1.4;
            letter-spacing: -0.01em;
        }

        /* 프로필 섹션 */
        .profile-section {
            margin-bottom: clamp(24px, 6vw, 48px);
        }

        .section-title {
            color: rgba(255, 255, 255, 0.95);
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            font-weight: 600;
            margin-bottom: 16px;
            letter-spacing: -0.01em;
        }

        .profile-card {
            background: rgba(255, 255, 255, 0.12);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            padding: clamp(16px, 4vw, 20px);
            backdrop-filter: blur(15px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            animation: slideInUp 0.5s ease-out;
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .profile-avatar {
            width: clamp(60px, 15vw, 80px);
            height: clamp(60px, 15vw, 80px);
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            position: relative;
        }

        .profile-avatar::after {
            content: 'JGenie';
            font-size: clamp(0.7rem, 3vw, 0.8rem);
            font-weight: 700;
            color: white;
            letter-spacing: -0.02em;
        }

        .profile-name-container {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            margin-bottom: 20px;
        }

        .profile-name {
            color: rgba(255, 255, 255, 0.95);
            font-size: clamp(1.1rem, 4vw, 1.3rem);
            font-weight: 700;
            letter-spacing: -0.01em;
        }

        /* 편집 버튼 */
        .edit-profile-btn {
            width: clamp(32px, 8vw, 36px);
            height: clamp(32px, 8vw, 36px);
            background: rgba(255, 255, 255, 0.15);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            touch-action: manipulation;
        }

        .edit-profile-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
            transform: scale(1.1);
        }

        .edit-profile-btn:active {
            transform: scale(0.95);
        }

        .edit-profile-btn::before {
            content: '수정';
            font-size: clamp(0.6rem, 2.5vw, 0.7rem);
            font-weight: 600;
            line-height: 1;
        }

        .profile-info {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .info-row:last-child {
            border-bottom: none;
        }

        .info-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-weight: 500;
            letter-spacing: -0.01em;
        }

        .info-value {
            color: rgba(255, 255, 255, 0.95);
            font-size: clamp(0.8rem, 3vw, 0.85rem);
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        /* 로그아웃 버튼 */
        .logout-btn {
            background: none;
            border: none;
            color: #9ca3af;
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            font-weight: 500;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            transition: all 0.2s ease;
            letter-spacing: -0.01em;
        }

        .logout-btn:hover {
            background: rgba(107, 114, 128, 0.1);
        }

        .logout-btn:active {
            transform: scale(0.95);
        }

        /* 계정 삭제 버튼 */
        .delete-account-btn {
            background: none;
            border: none;
            color: #ef4444;
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            font-weight: 500;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            transition: all 0.2s ease;
            letter-spacing: -0.01em;
        }

        .delete-account-btn:hover {
            background: rgba(239, 68, 68, 0.1);
        }

        .delete-account-btn:active {
            transform: scale(0.95);
        }

        /* 빈 상태 */
        .empty-state {
            text-align: center;
            padding: clamp(40px, 10vw, 60px) 20px;
            color: rgba(255, 255, 255, 0.7);
        }

        .empty-icon {
            font-size: clamp(2rem, 8vw, 3rem);
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-text {
            font-size: clamp(0.8rem, 3vw, 0.9rem);
            line-height: 1.5;
            margin-bottom: 8px;
        }

        .empty-subtext {
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            opacity: 0.8;
        }

        /* 모달 스타일 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            padding: 20px;
            padding-top: max(20px, env(safe-area-inset-top));
            padding-bottom: max(20px, env(safe-area-inset-bottom));
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: clamp(20px, 5vw, 24px);
            max-width: calc(100vw - 40px);
            width: 100%;
            max-width: 420px;
            max-height: calc(100vh - 40px);
            max-height: calc(100dvh - 40px);
            overflow-y: auto;
            backdrop-filter: blur(20px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            transform: translateY(30px) scale(0.9);
            transition: all 0.3s ease;
            position: relative;
        }

        .modal-overlay.active .modal-content {
            transform: translateY(0) scale(1);
        }

        .modal-close {
            position: absolute;
            top: 16px;
            right: 16px;
            width: clamp(28px, 7vw, 32px);
            height: clamp(28px, 7vw, 32px);
            border: none;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            touch-action: manipulation;
        }

        .modal-close:hover {
            background: rgba(0, 0, 0, 0.15);
            transform: scale(1.1);
        }

        .modal-close::before {
            content: '×';
            font-size: clamp(16px, 4vw, 18px);
            color: rgba(0, 0, 0, 0.6);
            font-weight: 300;
        }

        .modal-header {
            margin-bottom: 20px;
            padding-right: 40px;
        }

        .modal-title {
            font-size: clamp(1.1rem, 4vw, 1.2rem);
            font-weight: 700;
            color: rgba(0, 0, 0, 0.9);
            margin-bottom: 8px;
            letter-spacing: -0.02em;
        }

        .modal-subtitle {
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            color: rgba(0, 0, 0, 0.6);
            font-weight: 500;
        }

        /* 폼 스타일 */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-weight: 600;
            color: rgba(0, 0, 0, 0.8);
            margin-bottom: 8px;
            letter-spacing: -0.01em;
        }

        .form-input {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 8px;
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            font-family: inherit;
            color: rgba(0, 0, 0, 0.8);
            background: rgba(102, 126, 234, 0.03);
            transition: all 0.2s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: rgba(102, 126, 234, 0.5);
            background: rgba(102, 126, 234, 0.08);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-input::placeholder {
            color: rgba(0, 0, 0, 0.4);
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
        }

        .password-field {
            color: rgba(0, 0, 0, 0.4);
            font-size: clamp(0.75rem, 3vw, 0.8rem);
            letter-spacing: 0.1em;
        }

        .modal-actions {
            display: flex;
            gap: 8px;
            margin-top: 24px;
        }

        .btn {
            flex: 1;
            padding: clamp(10px, 3vw, 12px) clamp(16px, 4vw, 20px);
            border: none;
            border-radius: 10px;
            font-size: clamp(0.8rem, 3vw, 0.85rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            letter-spacing: -0.01em;
            touch-action: manipulation;
            min-height: 44px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: rgba(0, 0, 0, 0.05);
            color: rgba(0, 0, 0, 0.7);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(0, 0, 0, 0.08);
            transform: translateY(-1px);
        }

        /* 오류 메시지 */
        .error-message {
            color: #e53e3e;
            font-size: clamp(0.7rem, 2.5vw, 0.75rem);
            margin-top: 8px;
            text-align: center;
        }

        /* 알림 토스트 */
        .toast {
            position: fixed;
            bottom: 90px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: rgba(34, 197, 94, 0.95);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: clamp(0.8rem, 3vw, 0.85rem);
            font-weight: 500;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            z-index: 50;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .toast.show {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

        .toast.error {
            background: rgba(239, 68, 68, 0.95);
        }

        /* 하단 네비게이션 */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.12);
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.15);
            padding: 8px 0 6px 0;
            padding-bottom: max(6px, env(safe-area-inset-bottom));
            z-index: 100;
            height: clamp(60px, 15vw, 70px);
        }

        .nav-container {
            max-width: 100%;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            align-items: center;
            justify-items: center;
            height: 100%;
            padding: 0 16px;
            position: relative;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
            padding: 4px clamp(8px, 2vw, 12px);
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 8px;
            text-decoration: none;
            min-width: clamp(40px, 10vw, 44px);
            touch-action: manipulation;
            width: 100%;
            justify-self: center;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.15);
        }

        .nav-icon {
            width: clamp(20px, 5vw, 24px);
            height: clamp(20px, 5vw, 24px);
            position: relative;
            transition: all 0.2s ease;
        }

        /* 메인 자소서 버튼 */
        .main-button {
            grid-column: 3;
            justify-self: center;
            align-self: center;
            width: clamp(60px, 15vw, 70px);
            height: clamp(60px, 15vw, 70px);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            touch-action: manipulation;
            z-index: 10;
            margin-top: -10px;
        }

        .main-button:hover {
            transform: scale(1.05);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.5);
        }

        .main-button:active {
            transform: scale(0.95);
        }

        .main-button::before {
            content: '✍️';
            font-size: clamp(20px, 5vw, 24px);
            margin-bottom: 2px;
        }

        .main-button-text {
            font-size: clamp(0.5rem, 2vw, 0.6rem);
            color: white;
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        /* 말풍선 알림 */
        .bubble-notification {
            position: absolute;
            top: -45px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.95);
            color: rgba(102, 126, 234, 0.9);
            padding: 8px 12px;
            border-radius: 12px;
            font-size: clamp(0.65rem, 2.5vw, 0.7rem);
            font-weight: 600;
            white-space: nowrap;
            animation: bubbleBounce 2s ease-in-out infinite;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(10px);
        }

        .bubble-notification::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 6px solid rgba(255, 255, 255, 0.95);
        }

        @keyframes bubbleBounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateX(-50%) translateY(0);
            }
            40% {
                transform: translateX(-50%) translateY(-3px);
            }
            60% {
                transform: translateX(-50%) translateY(-1px);
            }
        }

        /* 홈 아이콘 */
        .nav-icon.home::before {
            content: '';
            position: absolute;
            top: 6px;
            left: 4px;
            width: 12px;
            height: 12px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-radius: 50%;
        }

        .nav-icon.home::after {
            content: '';
            position: absolute;
            top: 10px;
            left: 16px;
            width: 4px;
            height: 4px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 50%;
        }

        .nav-item.active .nav-icon.home::before {
            border-color: rgba(255, 255, 255, 0.95);
        }

        .nav-item.active .nav-icon.home::after {
            background: rgba(255, 255, 255, 0.95);
        }

        /* 검색 아이콘 */
        .nav-icon.search::before {
            content: '';
            position: absolute;
            top: 5px;
            left: 4px;
            width: 10px;
            height: 10px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-radius: 50%;
        }

        .nav-icon.search::after {
            content: '';
            position: absolute;
            top: 16px;
            left: 16px;
            width: 5px;
            height: 2px;
            background: rgba(255, 255, 255, 0.7);
            transform: rotate(45deg);
        }

        .nav-item.active .nav-icon.search::before {
            border-color: rgba(255, 255, 255, 0.95);
        }

        .nav-item.active .nav-icon.search::after {
            background: rgba(255, 255, 255, 0.95);
        }

        /* 커리어 아이콘 */
        .nav-icon.career::before {
            content: '';
            position: absolute;
            top: 3px;
            left: 4px;
            width: 10px;
            height: 14px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-radius: 1px;
        }

        .nav-icon.career::after {
            content: '';
            position: absolute;
            top: 8px;
            left: 9px;
            width: 6px;
            height: 1px;
            background: rgba(255, 255, 255, 0.7);
            box-shadow:
                0 2px 0 rgba(255, 255, 255, 0.7),
                0 4px 0 rgba(255, 255, 255, 0.7);
        }

        .nav-item.active .nav-icon.career::before {
            border-color: rgba(255, 255, 255, 0.95);
        }

        .nav-item.active .nav-icon.career::after {
            background: rgba(255, 255, 255, 0.95);
            box-shadow:
                0 2px 0 rgba(255, 255, 255, 0.95),
                0 4px 0 rgba(255, 255, 255, 0.95);
        }

        /* 프로필 아이콘 */
        .nav-icon.profile::before {
            content: '';
            position: absolute;
            top: 4px;
            left: 9px;
            width: 6px;
            height: 6px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-radius: 50%;
        }

        .nav-icon.profile::after {
            content: '';
            position: absolute;
            top: 11px;
            left: 3px;
            width: 12px;
            height: 8px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-top: none;
            border-radius: 0 0 6px 6px;
        }

        .nav-item.active .nav-icon.profile::before,
        .nav-item.active .nav-icon.profile::after {
            border-color: rgba(255, 255, 255, 0.95);
        }

        .nav-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: clamp(0.6rem, 2.5vw, 0.65rem);
            font-weight: 500;
            letter-spacing: -0.01em;
        }

        .nav-item.active .nav-label {
            color: rgba(255, 255, 255, 0.95);
        }

        /* 배경 파티클 효과 */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
                opacity: 0.1;
            }
            50% {
                transform: translateY(-12px) rotate(180deg);
                opacity: 0.25;
            }
        }

        /* 반응형 대응 */
        @media (max-width: 375px) {
            .main-container {
                padding: 12px;
            }

            .modal-overlay {
                padding: 12px;
            }

            .nav-item {
                padding: 4px 6px;
                min-width: 36px;
            }
        }

        @media (max-width: 320px) {
            .main-container {
                padding: 10px;
            }

            .modal-overlay {
                padding: 8px;
            }
        }

        @media (min-width: 768px) {
            .main-container {
                max-width: 500px;
                padding: 24px;
            }

            .nav-container {
                max-width: 500px;
            }
        }

        /* 접근성 개선 */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        /* iOS Safari 특화 */
        @supports (-webkit-touch-callout: none) {
            body {
                min-height: -webkit-fill-available;
            }

            .modal-content {
                max-height: -webkit-fill-available;
            }
        }
    </style>
</head>
<body>
<!-- 배경 파티클 -->
<div class="particles" id="particles"></div>

<!-- 메인 컨테이너 -->
<div class="main-container">
    <!-- 헤더 -->
    <header class="header">
        <div class="header-content">
            <h1 class="logo">JGenie</h1>
            <p class="welcome-text">안녕하세요, <span id="userName">사용자</span>님!<br>프로필 정보를 관리해보세요</p>
        </div>
    </header>

    <!-- 프로필 섹션 -->
    <section class="profile-section">
        <h2 class="section-title">내 프로필</h2>
        <div class="profile-card" id="profileCard">
            <div class="profile-avatar"></div>
            <div class="profile-name-container">
                <div class="profile-name" id="profileName">사용자</div>
                <button class="edit-profile-btn" id="editProfileBtn" style="display: none;"></button>
            </div>
            <div class="profile-info">
                <div class="info-row">
                    <span class="info-label">아이디</span>
                    <span class="info-value" id="profileId">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">나이</span>
                    <span class="info-value" id="profileAge">-</span>
                </div>
                <div class="info-row">
                    <span class="info-label">전공</span>
                    <span class="info-value" id="profileMajor">-</span>
                </div>
            </div>
        </div>

        <!-- 빈 상태 -->
        <div class="empty-state" id="emptyState" style="display: none;">
            <div class="empty-icon"></div>
            <div class="empty-text">프로필 정보를 불러올 수 없습니다</div>
            <div class="empty-subtext">잠시 후 다시 시도해주세요</div>
        </div>

        <!-- 계정 관리 버튼들 (섹션 밖) -->
        <div style="display: flex; justify-content: flex-end; gap: 12px; margin-top: 16px;">
            <button class="logout-btn" id="logoutBtn" style="display: none;">로그아웃</button>
            <button class="delete-account-btn" id="deleteAccountBtn2" style="display: none;">계정삭제</button>
        </div>
    </section>
</div>

<!-- 프로필 편집 모달 -->
<div class="modal-overlay" id="profileModal">
    <div class="modal-content">
        <button class="modal-close" id="modalClose"></button>
        <div class="modal-header">
            <h2 class="modal-title">내 정보 수정</h2>
            <p class="modal-subtitle">프로필 정보를 업데이트해보세요</p>
        </div>

        <form id="profileForm">
            <div class="form-group">
                <label class="form-label" for="editId">아이디</label>
                <input
                        type="text"
                        class="form-input"
                        id="editId"
                        name="id"
                        placeholder="아이디를 입력해주세요"
                        required>
            </div>

            <div class="form-group">
                <label class="form-label" for="editPassword">비밀번호</label>
                <input
                        type="password"
                        class="form-input password-field"
                        id="editPassword"
                        name="password"
                        placeholder="새 비밀번호를 입력해주세요 (선택사항)"
                        value="★★★★★★">
            </div>

            <div class="form-group">
                <label class="form-label" for="editName">이름</label>
                <input
                        type="text"
                        class="form-input"
                        id="editName"
                        name="name"
                        placeholder="이름을 입력해주세요"
                        required>
            </div>

            <div class="form-group">
                <label class="form-label" for="editAge">나이</label>
                <input
                        type="text"
                        class="form-input"
                        id="editAge"
                        name="age"
                        placeholder="나이를 입력해주세요"
                        required>
            </div>

            <div class="form-group">
                <label class="form-label" for="editMajor">전공</label>
                <input
                        type="text"
                        class="form-input"
                        id="editMajor"
                        name="major"
                        placeholder="전공을 입력해주세요"
                        required>
            </div>

            <div class="error-message" id="errorMessage" style="display: none;"></div>

            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" id="modalCancel">취소</button>
                <button type="submit" class="btn btn-primary" id="modalSubmit">수정하기</button>
            </div>
        </form>
    </div>
</div>

<!-- 토스트 추가 (하단 네비게이션 바로 위) -->
<div id="successToast" class="toast"></div>

<!-- 하단 네비게이션 -->
<nav class="bottom-nav">
    <div class="nav-container">
        <a href="/main/home" class="nav-item">
            <div class="nav-icon home"></div>
            <span class="nav-label">홈</span>
        </a>
        <a href="/main/search" class="nav-item">
            <div class="nav-icon search"></div>
            <span class="nav-label">검색</span>
        </a>

        <!-- 메인 자소서 버튼 -->
        <button class="main-button" id="mainButton">
            <div class="bubble-notification">내 자소서 확인하세요!</div>
            <span class="main-button-text">자소서</span>
        </button>

        <a href="/main/career" class="nav-item">
            <div class="nav-icon career"></div>
            <span class="nav-label">커리어</span>
        </a>
        <a href="/main/profile" class="nav-item active">
            <div class="nav-icon profile"></div>
            <span class="nav-label">프로필</span>
        </a>
    </div>
</nav>

<script>
    // 전역 변수
    let userData = null;

    // 배경 파티클 생성
    function createParticles() {
        const particlesContainer = document.getElementById('particles');
        const particleCount = 10;

        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.classList.add('particle');

            particle.style.top = Math.random() * 100 + '%';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 8 + 's';
            particle.style.animationDuration = (6 + Math.random() * 4) + 's';

            particlesContainer.appendChild(particle);
        }
    }

    // API에서 사용자 데이터 가져오기
    async function fetchUserData() {
        try {
            const response = await fetch('/user');
            if (!response.ok) {
                throw new Error('사용자 정보를 불러올 수 없습니다.');
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('API 호출 오류:', error);
            throw error;
        }
    }

    // 사용자 정보 업데이트
    async function updateUserData(userData) {
        try {
            const response = await fetch('/user', {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userData)
            });

            if (response.status === 200) {
                return true;
            } else {
                throw new Error('정보 수정에 실패했습니다.');
            }
        } catch (error) {
            console.error('사용자 정보 업데이트 오류:', error);
            throw error;
        }
    }

    // 로그아웃 처리
    async function handleLogout() {
        if (!confirm('로그아웃 하시겠습니까?')) {
            return;
        }

        const logoutButton = document.getElementById('logoutBtn');

        // 버튼 비활성화 및 로딩 상태
        logoutButton.disabled = true;
        logoutButton.textContent = '로그아웃 중...';

        try {
            const response = await fetch('/user/logout', {
                method: 'GET'
            });

            if (response.status === 200) {
                // 성공 시 홈으로 리다이렉트
                window.location.href = '/';
            } else {
                throw new Error('로그아웃에 실패했습니다.');
            }
        } catch (error) {
            console.error('로그아웃 오류:', error);
            showToast('로그아웃에 실패했습니다', 'error');
        } finally {
            // 버튼 상태 복원
            logoutButton.disabled = false;
            logoutButton.textContent = '로그아웃';
        }
    }

    // 계정 삭제 처리
    async function handleDeleteAccount() {
        if (!confirm('정말로 계정을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
            return;
        }

        const deleteButton = document.getElementById('deleteAccountBtn2');

        // 버튼 비활성화 및 로딩 상태
        deleteButton.disabled = true;
        deleteButton.textContent = '삭제 중...';

        try {
            const response = await fetch('/user/delete-account', {
                method: 'GET'
            });

            if (response.status === 200) {
                // 성공 시 홈으로 리다이렉트
                window.location.href = '/';
            } else {
                throw new Error('계정 삭제에 실패했습니다.');
            }
        } catch (error) {
            console.error('계정 삭제 오류:', error);
            showToast('계정 삭제에 실패했습니다', 'error');
        } finally {
            // 버튼 상태 복원
            deleteButton.disabled = false;
            deleteButton.textContent = '계정삭제';
        }
    }

    // 토스트 메시지 표시 함수
    function showToast(message, type = 'success') {
        const toast = document.getElementById('successToast');
        toast.textContent = message;

        // 타입에 따라 클래스 설정
        toast.className = 'toast';
        if (type === 'error') {
            toast.classList.add('error');
        }

        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // 프로필 데이터 렌더링
    function renderProfile(user) {
        userData = user;

        // 헤더의 사용자 이름 업데이트
        document.getElementById('userName').textContent = user.name;

        // 프로필 카드 정보 업데이트
        document.getElementById('profileName').textContent = user.name;
        document.getElementById('profileId').textContent = user.id;
        document.getElementById('profileAge').textContent = user.age;
        document.getElementById('profileMajor').textContent = user.major;

        // 수정 버튼과 계정 관리 버튼들 표시
        document.getElementById('editProfileBtn').style.display = 'flex';
        document.getElementById('logoutBtn').style.display = 'inline-block';
        document.getElementById('deleteAccountBtn2').style.display = 'inline-block';

        // 프로필 카드 표시
        document.getElementById('profileCard').style.display = 'block';
        document.getElementById('emptyState').style.display = 'none';
    }

    // 프로필 편집 모달 열기
    function openProfileModal() {
        if (!userData) return;

        const modal = document.getElementById('profileModal');

        // 폼에 현재 데이터 채우기
        document.getElementById('editId').value = userData.id;
        document.getElementById('editName').value = userData.name;
        document.getElementById('editAge').value = userData.age;
        document.getElementById('editMajor').value = userData.major;

        // 비밀번호 필드 초기화
        document.getElementById('editPassword').value = '★★★★★★';

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';

        // 오류 메시지 숨기기
        document.getElementById('errorMessage').style.display = 'none';
    }

    // 모달 닫기
    function closeProfileModal() {
        const modal = document.getElementById('profileModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';

        // 폼 초기화
        document.getElementById('profileForm').reset();
        document.getElementById('errorMessage').style.display = 'none';
    }

    // 오류 메시지 표시
    function showErrorMessage(message) {
        const errorElement = document.getElementById('errorMessage');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    // 프로필 업데이트 처리
    async function handleProfileUpdate(formData) {
        const submitButton = document.getElementById('modalSubmit');

        // 버튼 비활성화 및 로딩 상태
        submitButton.disabled = true;
        submitButton.textContent = '수정 중...';

        try {
            // 비밀번호가 별표로 표시된 경우 null로 처리
            const password = formData.get('password');
            const updateData = {
                id: formData.get('id'),
                password: password === '★★★★★★' ? null : password,
                name: formData.get('name'),
                age: formData.get('age'),
                major: formData.get('major')
            };

            const success = await updateUserData(updateData);

            if (success) {
                // 성공 처리
                closeProfileModal();
                showToast('프로필이 성공적으로 수정되었습니다!', 'success');

                // 프로필 데이터 다시 불러오기
                const updatedUser = await fetchUserData();
                renderProfile(updatedUser);
            }
        } catch (error) {
            console.error('프로필 업데이트 오류:', error);
            showErrorMessage('정보 수정에 실패했습니다');
        } finally {
            // 버튼 상태 복원
            submitButton.disabled = false;
            submitButton.textContent = '수정하기';
        }
    }

    // 메인 자소서 버튼 클릭 이벤트
    const mainButton = document.getElementById('mainButton');
    if (mainButton) {
        mainButton.addEventListener('click', function() {
            window.location.href = '/coverletter';
        });
    }

    // 이벤트 리스너 설정
    document.addEventListener('DOMContentLoaded', function() {
        // 프로필 편집 버튼
        document.getElementById('editProfileBtn').addEventListener('click', openProfileModal);

        // 로그아웃 버튼
        document.getElementById('logoutBtn').addEventListener('click', handleLogout);

        // 계정 삭제 버튼
        document.getElementById('deleteAccountBtn2').addEventListener('click', handleDeleteAccount);

        // 모달 닫기 버튼들
        document.getElementById('modalClose').addEventListener('click', closeProfileModal);
        document.getElementById('modalCancel').addEventListener('click', closeProfileModal);

        // 모달 외부 클릭시 닫기
        document.getElementById('profileModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeProfileModal();
            }
        });

        // 프로필 폼 제출
        document.getElementById('profileForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            handleProfileUpdate(formData);
        });

        // 비밀번호 필드 포커스시 내용 지우기
        document.getElementById('editPassword').addEventListener('focus', function() {
            if (this.value === '★★★★★★') {
                this.value = '';
            }
        });

        // 비밀번호 필드 블러시 빈 값이면 별표로 되돌리기
        document.getElementById('editPassword').addEventListener('blur', function() {
            if (this.value === '') {
                this.value = '★★★★★★';
            }
        });

        // 네비게이션 아이템 클릭 이벤트
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', function(e) {
                if (this.classList.contains('active')) {
                    e.preventDefault();
                    return;
                }

                document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                this.classList.add('active');
            });
        });
    });

    // 페이지 로드 시 초기화
    window.addEventListener('load', async () => {
        createParticles();

        try {
            // API에서 사용자 데이터 가져와서 렌더링
            const user = await fetchUserData();
            renderProfile(user);
        } catch (error) {
            console.error('사용자 데이터 로드 실패:', error);
            // 오류 발생 시 빈 상태 표시
            document.getElementById('profileCard').style.display = 'none';
            document.getElementById('emptyState').style.display = 'block';
        }
    });
</script>
</body>
</html>